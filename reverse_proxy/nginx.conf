# *******************************
# NGINX リバースプロキシ設定例
# *******************************

# pidファイルの場所 (nginx-unprivilegedイメージでは、変更の必要があります)
pid /tmp/nginx.pid;


# ワーカープロセス数を自動設定
worker_processes auto;

# イベント設定
events {
    # ワーカープロセスあたりの最大接続数 (必要に応じて調整)
    worker_connections 1024;
}

# メインHTTP設定
# ⚠️ HTTPS (TLS)はサポートしません。もし必要な場合も、このNGINXサーバーでTLS設定を行うのはあまり現実的ではありません。
#    HTTPSを使用する場合は、AWSのALBやCloudFrontなど、外部サービスでHTTPS終端を行い、それ以降はHTTPでこのサービスに接続することが安全かつ現実的です。
#    その場合、ALBなどのサービスの設定に合わせて、NGINXのconfファイルを適切に調整してください (例: X-Forwarded-Protoヘッダー、クライアントIP取得の設定など)。
http {
    # 基本設定
    sendfile on; 
    tcp_nopush on; 
    tcp_nodelay on;
    keepalive_timeout 65s;
    types_hash_max_size 4096;
    server_tokens off;
    client_max_body_size 50m;   # もし大きなファイルアップロードが必要なら調整。 i2b2では通常不要。
    gzip on;                    #　圧縮を有効化 (必要に応じて調整)

    # ==========================================================
    # Client IPの取得と信頼できるプロキシの設定
    # ==========================================================
    # NGINXが直接クライアントと接続することを想定するので、real_ipモジュールは無効化
    # (ALBなどのプロキシやロードバランサーを介する場合は、ALBの設定に合わせて設定を調整してください)
    
    real_ip_header none;

    # ⚠️ ALBなど、ロードバランサーをNGINXの前に配置する場合は、上の設定を無効にしてください。
    #    その代わり、IP spoofingなどのリスクを避けるように慎重に設定してください。
    #    以下に例を示しますが、万能の設定はありません。環境に合わせて適切に設定してください。
    #    例えば、ロードバランサーを立ててそこでHTTPS終端を行う場合、以下のような構成が考えられます。
    # set_real_ip_from 10.0.1.0/24;   # <- 10.0.1.0/24 はロードバランサーのサブネットに置き換えてください
    # set_real_ip_from 10.0.2.0/24;   # <- 10.0.2.0/24 他にロードバランサーがある場合、それも追加
    # set_real_ip_from 10.0.3.0/24; # <- さらに追加できます
    # real_ip_header    X-Forwarded-For;　
    # real_ip_recursive on; # <- これにより、X-Forwarded-Forヘッダーのうち、ロードバランサーからのIPアドレス以外の、一番右端のIPがクライアントIPとして使用されます

    # ==========================================================
    # Upstream to i2b2 Webclient
    # ==========================================================
    upstream i2b2_upstream {
        least_conn;                  # least connectionsに基づくロードバランシング (複数コンテナがある場合。単一コンテナなら意味ないが、無害。）
        server i2b2-webclient:80;    # i2b2-webclientコンテナとポート
    }

    # ==========================================================
    # NGINXのログ設定
    # ==========================================================
    # ログの保存先ディレクトリが存在し、NGINXが書き込み可能であることが必要です。もしDocker側で設定がうまく行っていないと、エラーが発生します。
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                'xff="$http_x_forwarded_for" proto="$http_x_forwarded_proto"';
    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # ==========================================================
    # レート制限 (必要に応じて調整)
    # ==========================================================
    # 例えば、1秒あたり50リクエストに制限する場合、以下のように設定します。
    # 必要に応じて、rateやburstの値を調整してください。
    limit_req_zone $binary_remote_addr zone=req_zone:5m rate=50r/s;

    # ==========================================================
    # サーバーブロック
    # ==========================================================
    # HTTPのみをリッスン (HTTPSはサポートしません、必要ならNGINXの前にロードバランサーや別のプロキシを置いてHTTP終端を行ってください)
    server {
        # 8080番ポートでリッスン
        # ⚠️ docker-compose.ymlでホスト側のポート80をコンテナの8080にマッピングしていることを確認してください。
        #    こうすることで 8080をリッスンすると、ホストの80番ポートでアクセス可能になります。
        #    nginx-unprivilegedイメージを使用しているため、80番ポートを直接リッスンできません。
        listen 8080;
        server_name _;    

        # グローバルにレート制限を適用
        limit_req zone=req_zone burst=50 nodelay;

        # ヘルスチェックエンドポイント (必要に応じて調整)
        # 例えば、ALBのヘルスチェックに使用する場合などに便利です。(特に使わなない場合でも、通常無害です。)
        location = /healthz {
            # ヘルスチェックのレスポンス
            add_header Content-Type text/plain;
            return 200 "ok\n";
        }

        # Redirect root → /webclient/
        location = / {
            return 302 /webclient/;
        }

        # Core server (cells)
        location /i2b2/ {
            proxy_pass http://i2b2-core-server:8080/i2b2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        ## Webclient UI
        location ^~ /webclient/ {
            # プロキシ先のi2b2 Webclientコンテナへ転送
            proxy_pass http://i2b2_upstream;
            # クライエントのIPアドレス関連ヘッダー設定
            # (⚠️ ALBなどのロードバランサーを介する場合は、`proxy_set_header X-Forwarded-For $http_x_forwarded_for`に置き換えを推奨します。)
            proxy_set_header X-Forwarded-For $remote_addr; 
            proxy_set_header X-Real-IP       $remote_addr;
            # ホスト関連のヘッダー設定
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-Host  $host;
            # プロトコル関連のヘッダー設定
            # (⚠️ ALBなどのロードバランサーを介する場合は、`proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto`に置き換えを検討してください。)
            proxy_set_header X-Forwarded-Proto http;

            # HTTP/1.1 proxy options
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            #　バッファリング設定 (必要に応じて調整)
            proxy_buffering on;

            # タイムアウト設定 (必要に応じて調整、初期値はかなり長めに設定しています。）
            proxy_connect_timeout 60s;
            proxy_send_timeout    600s;
            proxy_read_timeout    600s;
            send_timeout          600s;

            # 追加のセキュリティヘッダー (必要に応じて調整してください。）
            # ⚠️ `add_header X-Frame-Options "DENY"` はだめです。i2b2 Webclientはiframeを使用しているため、これを設定すると動作しなくなります。
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-Content-Type-Options "nosniff";
            add_header Referrer-Policy "strict-origin-when-cross-origin";
        }
        
    }

}
